{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Iterate through the list of numbers using enumerate to access both index and value\n    for i, num1 in enumerate(numbers):\n        # For each number, create a nested loop to compare it with every other number in the list\n        for j, num2 in enumerate(numbers):\n            # Make sure to skip comparing a number with itself by checking if the indices are different\n            if i != j:\n                # Calculate the absolute difference between the two numbers being compared\n                diff = abs(num1 - num2)\n                # If the difference is less than the threshold, immediately return True\n                if diff < threshold:\n                    return True\n    # If no close elements are found after checking all pairs, return False\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \n    Action Plan:\n    1. Initialize an empty list to store the final result\n    2. Initialize an empty list or string to build the current group\n    3. Initialize a counter to keep track of the current depth (nesting level) of parentheses\n    4. Iterate through each character in the input string:\n       a. If the character is '(', increment the depth and add it to the current group\n       b. If the character is ')', decrement the depth and add it to the current group\n       c. If the depth becomes 0 after processing a ')', it means a group is complete:\n          - Add the current group to the result list\n          - Reset the current group\n    5. Return the result list containing all separated groups\n    \n    Note: Remember to ignore spaces in the input string during processing.\n    \"\"\"\n    result = []\n    current_group = ''\n    depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group += char\n        elif char == ')':\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                result.append(current_group.strip())\n                current_group = ''\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Step 4: Implement the solution\n    decimal_part = number % 1\n\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0  # Step 1: Initialize a variable to keep track of the account balance, starting at zero.\n\n    for operation in operations:  # Step 2: Loop through each operation in the 'operations' list.\n        balance += operation  # Update the balance by adding the current operation.\n        if balance < 0:  # Step 2b: Check if the balance has become negative.\n            return True  # If yes, immediately return True.\n\n    return False  # Step 3: If the loop completes without returning True, it means the balance never fell below zero."}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Step 1: Calculate the mean of the input list 'numbers'\n    mean = sum(numbers) / len(numbers)\n\n    # Step 2: Compute the absolute differences\n    absolute_differences = [abs(x - mean) for x in numbers]\n\n    # Step 3: Calculate the average of the absolute differences\n    mad = sum(absolute_differences) / len(numbers)\n\n    # Step 4: Return the final result (Mean Absolute Deviation)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    # Step 1: Check if the input list 'numbers' is empty. If so, return an empty list.\n    if not numbers:\n        return []\n\n    # Step 2: Create an empty list to store the result.\n    result = []\n\n    # Step 3: Iterate through the elements of 'numbers', excluding the last element:\n    for i in range(len(numbers) - 1):\n        # a. Append the current element to the result list.\n        result.append(numbers[i])\n        # b. Append the 'delimeter' to the result list.\n        result.append(delimeter)\n\n    # Step 4: After the loop, append the last element of 'numbers' to the result list.\n    result.append(numbers[-1])\n\n    # Step 5: Return the result list.\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Step 1: Split the input string into separate groups of parentheses.\n    groups = paren_string.split()\n\n    def process_group(group: str) -> int:\n        # Step 2: Create a helper function to process each group.\n        current_depth = 0\n        max_depth = 0\n\n        for char in group:\n            # Step 2b: Iterate through each character in the group.\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n\n        return max_depth\n\n    # Step 3: Apply the helper function to each group in the input.\n    max_depths = [process_group(group) for group in groups]\n\n    # Step 4: Return a list of maximum depths for all groups.\n    return max_depths"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n    Action Plan:\n    1. Initialize an empty list to store the filtered strings.\n    2. Iterate through each string in the input 'strings' list.\n    3. For each string, check if the 'substring' is present in it.\n    4. If the substring is found, add the current string to the filtered list.\n    5. After checking all strings, return the filtered list.\n    \n    Note: Consider using a list comprehension for a more concise implementation.\n    \"\"\"\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # Step 1: Initialize two variables:\n    sum_value = 0\n    product_value = 1\n\n    # Step 2: Iterate through each number in the input list\n    for number in numbers:\n        # Step 3: For each number:\n        # Add it to the sum variable\n        sum_value += number\n        # Multiply it with the product variable\n        product_value *= number\n\n    # Step 4: After the iteration, return a tuple containing:\n    # The final sum value\n    # The final product value\n    return (sum_value, product_value)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n    Action Plan:\n    1. Initialize two variables:\n       a. A variable to store the running maximum (initially None or the first element)\n       b. An empty list to store the result\n\n    2. Iterate through each number in the input list:\n       a. If this is the first number (running max is None), set it as the running max\n       b. Otherwise, compare the current number with the running max:\n          - Update the running max if the current number is larger\n       c. Append the current running max to the result list\n\n    3. After the iteration, return the result list\n\n    Note: Be careful with the initial case, especially if the list might be empty.\n    \"\"\"\n    if not numbers:\n        return []\n\n    running_max = None\n    result = []\n\n    for number in numbers:\n        if running_max is None:\n            running_max = number\n        else:\n            running_max = max(running_max, number)\n        result.append(running_max)\n\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while beginning_of_suffix < len(string):\n        if is_palindrome(string[beginning_of_suffix:]):\n            break\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Step 2: Initialize an empty result string to store the XOR output.\n    result = ''\n\n    # Step 3: Iterate through both input strings simultaneously.\n    for char_a, char_b in zip(a, b):\n        # Step 4: For each pair of characters, compare them using the XOR logic.\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n\n    # Step 5: After processing all characters, return the final result string.\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    # Step 1: Check if the input list is empty\n    if not strings:\n        return None\n\n    # Step 2: Find the maximum length among all strings\n    max_length = max(len(s) for s in strings)\n\n    # Step 3: Iterate through the list of strings\n    for string in strings:\n        if len(string) == max_length:\n            return string\n\n    # Step 4: (Not necessary, but included for completeness)\n    # If no string is returned after the loop, return None\n    return None"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Implement the Euclidean algorithm for finding GCD\n    while b != 0:\n        # Assign the value of b to a temporary variable\n        temp = b\n        # Update b to be the remainder of a divided by b\n        b = a % b\n        # Assign the temporary variable's value to a\n        a = temp\n    # After the loop ends, return the final value of a as the GCD\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    # Step 1: Initialize an empty list to store the prefixes.\n    prefixes = []\n\n    # Step 2: Iterate through the input string\n    for i in range(len(string)):\n        # For each iteration, consider the characters from the start of the string up to the current position.\n        # Create a prefix by slicing the string from the start to the current position (inclusive).\n        prefix = string[:i+1]\n        # Add this prefix to the list of prefixes.\n        prefixes.append(prefix)\n\n    # Step 3: After the iteration is complete, return the list of prefixes.\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Step 1: Create a sequence of numbers from 0 to n (inclusive)\n    num_sequence = list(range(n + 1))\n\n    # Step 2: Convert each number in the sequence to a string\n    str_sequence = [str(num) for num in num_sequence]\n\n    # Step 3: Join the string representations\n    result = ' '.join(str_sequence)\n\n    # Step 4: Return the resulting string\n    return result"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Step 1: Convert the input string to lowercase\n    lowercase_string = string.lower()\n\n    # Step 2: Create a collection of unique characters from the lowercase string\n    unique_chars = set(lowercase_string)\n\n    # Step 3: Count the number of elements in this collection of unique characters\n    count = len(unique_chars)\n\n    # Step 4: Return the count as an integer\n    return count"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Step 1: Create a dictionary to map note symbols to their durations\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Step 2: Split the input string into individual notes using the space character as a delimiter\n    notes = music_string.split()\n\n    # Step 3: Iterate through the split notes\n    durations = []\n    for note in notes:\n        # Step 3.1: Look up the duration of the note in the mapping dictionary\n        duration = note_durations.get(note, 0)\n\n        # Step 3.2: Add the duration to the result list\n        durations.append(duration)\n\n    # Step 4: Filter out any potential empty strings resulting from the split operation\n    durations = [duration for duration in durations if duration != 0]\n\n    # Step 5: Return the list of durations\n    return durations"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Step 1: Initialize a counter variable to keep track of the number of occurrences.\n    count = 0\n\n    # Step 2: Determine the range for iteration.\n    # The upper bound should be the length of the string minus the length of the substring, plus 1.\n    # This ensures we don't go out of bounds and check all possible positions.\n    for i in range(len(string) - len(substring) + 1):\n        # Step 3: Iterate through the main string using the range determined in step 2.\n        # a. For each position, extract a slice of the main string with the same length as the substring.\n        slice = string[i:i+len(substring)]\n        # b. Compare this slice with the substring.\n        # c. If they match, increment the counter.\n        if slice == substring:\n            count += 1\n\n    # Step 4: After the iteration is complete, return the final count.\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Step 1: Create a dictionary to map word representations of numbers to their integer values.\n    number_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Step 2: Split the input string into a list of individual words.\n    words = numbers.split()\n\n    # Step 3: Sort the list of words using a custom key.\n    sorted_words = sorted(words, key=lambda word: number_dict[word])\n\n    # Step 4: Join the sorted list of words back into a string.\n    sorted_numbers = ' '.join(sorted_words)\n\n    # Step 5: Return the resulting sorted string.\n    return sorted_numbers"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    # Step 1: Initialize variables to store the closest pair and their distance\n    closest_pair = None\n    smallest_distance = None\n\n    # Step 2: Iterate through the list to compare each pair of numbers\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            # Step 3: Calculate the distance between pairs\n            distance = abs(numbers[i] - numbers[j])\n\n            # Step 4: Update the closest pair when a smaller distance is found\n            if smallest_distance is None or distance < smallest_distance:\n                smallest_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    # Step 5: Handle the case of identical numbers\n    if closest_pair[0] == closest_pair[1]:\n        return closest_pair\n\n    # Step 6: Return the result in the correct order\n    return tuple(sorted(closest_pair))"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n    Action Plan:\n    1. Find the minimum value in the input list 'numbers'.\n    2. Find the maximum value in the input list 'numbers'.\n    3. Calculate the range by subtracting the minimum from the maximum.\n    4. Create a new list by applying the following transformation to each number 'x' in 'numbers':\n       a. Subtract the minimum value from 'x'.\n       b. Divide the result by the range calculated in step 3.\n    5. Return the new list containing the transformed values.\n    \n    Note: Ensure to handle potential division by zero if all numbers in the list are the same.\n    \"\"\"\n    # Step 1: Find the minimum value in the input list 'numbers'\n    min_value = min(numbers)\n    \n    # Step 2: Find the maximum value in the input list 'numbers'\n    max_value = max(numbers)\n    \n    # Step 3: Calculate the range by subtracting the minimum from the maximum\n    range_value = max_value - min_value\n    \n    # Handle potential division by zero if all numbers in the list are the same\n    if range_value == 0:\n        return [0.0] * len(numbers)\n    \n    # Step 4: Create a new list by applying the transformation to each number 'x' in 'numbers'\n    rescaled_numbers = [(x - min_value) / range_value for x in numbers]\n    \n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # Step 1: Initialize an empty list to store the filtered integers.\n    filtered_integers = []\n\n    # Step 2: Iterate through each element in the input 'values' list.\n    for value in values:\n        # Step 3: For each element, check if it's an integer using the appropriate Python function.\n        if isinstance(value, int):\n            # Step 4: If the element is an integer, add it to the filtered list.\n            filtered_integers.append(value)\n\n    # Step 5: After checking all elements, return the filtered list containing only integers.\n    return filtered_integers"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n    Action Plan:\n    1. Initialize a variable 'count' to 0 to keep track of the string length\n    2. Iterate through each character in the input 'string':\n       a. For each character, increment 'count' by 1\n    3. After the iteration is complete, return the final value of 'count'\n\n    Note: This plan avoids using any built-in length functions and implements the length calculation manually.\n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1\n    return count"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Step 1: Start with the number just below n (n-1)\n    divisor = n - 1\n\n    # Step 2: Iterate through numbers in descending order\n    while divisor > 1:\n        # Step 2a: For each number, check if it divides n evenly\n        if n % divisor == 0:\n            # Step 2b: Use the modulo operator (%) to check for even division\n            return divisor\n        # Step 4: Continue the loop until a divisor is found\n        divisor -= 1\n\n    # If no divisor is found, return 1 (as 1 is a divisor of all numbers)\n    return 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n\n    while divisor * divisor <= n:\n        count = 0\n        while n % divisor == 0:\n            n //= divisor\n            count += 1\n        if count > 0:\n            factors.append(divisor)\n            factors.append(count)\n        divisor += 1\n\n    if n > 1:\n        factors.append(n)\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \n    Action Plan:\n    1. Create a data structure to count the occurrences of each number in the input list.\n       Hint: Consider using a dictionary or a specialized counting tool from the collections module.\n    \n    2. Iterate through the input list once to populate the counting data structure.\n    \n    3. Create a new empty list to store the result.\n    \n    4. Iterate through the original input list again:\n       a. For each number, check its count in the data structure.\n       b. If the count is 1 (appears only once), add it to the result list.\n    \n    5. Return the result list containing only the unique elements, preserving the original order.\n    \n    Note: Try to implement this solution in a single pass through the list if possible,\n    but prioritize correctness over optimization initially.\n    \"\"\"\n    # Step 1: Count occurrences using Counter from collections\n    count_dict = Counter(numbers)\n    \n    # Step 2: Populate the count_dict in a single pass\n    unique_numbers = []\n    for number in numbers:\n        if count_dict[number] == 1:\n            unique_numbers.append(number)\n    \n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Step 1: Initialize an empty result string\n    result = ''\n\n    # Step 2: Iterate through each character in the input string\n    for char in string:\n        # Step 2a: Check if the character is lowercase\n        if char.islower():\n            # Convert it to uppercase and append to result\n            result += char.upper()\n        # Step 2b: Check if the character is uppercase\n        elif char.isupper():\n            # Convert it to lowercase and append to result\n            result += char.lower()\n        # Step 2c: If the character is neither (e.g., numbers or symbols), keep it as is\n        else:\n            result += char\n\n    # Step 3: Return the result string\n    return result"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    # Step 1: Initialize an empty result string to store the concatenated output.\n    result = \"\"\n\n    # Step 2: Check if the input list is empty. If so, return the empty result string.\n    if not strings:\n        return result\n\n    # Step 3: Iterate through each string in the input list:\n    # a. Add each string to the result string.\n    for string in strings:\n        result += string\n\n    # Step 4: After the iteration, return the final result string.\n    return result"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n    Action Plan:\n    1. Initialize an empty list to store the filtered strings.\n    2. Iterate through each string in the input 'strings' list.\n    3. For each string, check if it starts with the given 'prefix'.\n    4. If the string starts with the prefix, add it to the filtered list.\n    5. After checking all strings, return the filtered list.\n    \n    Hint: Consider using a list comprehension to make the code more concise.\n    Remember to use the 'startswith()' method to check if a string begins with the prefix.\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n\n    Action Plan:\n    1. Understand the function's purpose: filter out non-positive numbers from the input list.\n    2. Input: 'l' is a list of numbers (can be integers or floats).\n    3. Create a new list containing only the positive numbers from the input list.\n    4. Use a concise Python construct to iterate through the input list and apply a condition.\n    5. For each element in the input list, check if it's greater than 0.\n    6. If an element satisfies the condition, include it in the new list.\n    7. Return the new list containing only positive numbers.\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \n    Action Plan:\n    1. Check if n is less than 2. If so, return False as numbers less than 2 are not prime.\n    2. Loop through numbers from 2 to n-1 (exclusive):\n       a. Check if n is divisible by the current number (use modulo operator %).\n       b. If n is divisible by any number in this range, return False immediately.\n    3. If the loop completes without finding any divisors, return True.\n    \n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xsx^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements and the largest non-zero coefficient.\")\n\n    begin = -1.0\n    end = 1.0\n\n    while xs[-1] != 0:\n        if poly(xs, begin) * poly(xs, end) > 0:\n            end *= 2\n        else:\n            begin = (begin + end) / 2\n\n    return round(begin, 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Step 1: Create a copy of the input list 'l' to avoid modifying the original list.\n    l_copy = l.copy()\n\n    # Step 2: Extract elements at indices divisible by 3 (0, 3, 6, ...) into a separate list.\n    elements_at_divisible_by_3 = l_copy[::3]\n\n    # Step 3: Sort the extracted elements.\n    sorted_elements = sorted(elements_at_divisible_by_3)\n\n    # Step 4: Replace the elements at indices divisible by 3 in the copied list with the sorted elements.\n    l_copy[::3] = sorted_elements\n\n    # Step 5: Return the modified list.\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Step 1: Convert the input list to a set to remove duplicates\n    unique_elements = set(l)\n\n    # Step 2: Convert the set back to a list\n    unique_list = list(unique_elements)\n\n    # Step 3: Sort the list in ascending order\n    sorted_unique_list = sorted(unique_list)\n\n    # Step 4: Return the sorted list of unique elements\n    return sorted_unique_list"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n    # Step 1: Initialize a variable 'max_val' with the first element of the input list 'l'\n    max_val = l[0]\n\n    # Step 2: Iterate through each element 'e' in the list 'l'\n    for e in l:\n        # Step 2a: Compare 'e' with 'max_val'\n        if e > max_val:\n            # Step 2b: If 'e' is greater than 'max_val', update 'max_val' to be 'e'\n            max_val = e\n\n    # Step 3: After the iteration is complete, return 'max_val'\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    # Step 1: Initialize a container to store numbers meeting the criteria\n    numbers = []\n\n    # Step 2: Iterate through numbers from 0 to n-1\n    for i in range(n):\n        # Check if the current number is divisible by 11 or 13\n        if i % 11 == 0 or i % 13 == 0:\n            # Add it to the container\n            numbers.append(i)\n\n    # Step 3: Convert the collected numbers to a single string\n    numbers_str = ''.join(map(str, numbers))\n\n    # Step 4: Count the occurrences of '7' in the resulting string\n    count_seven = numbers_str.count('7')\n\n    # Return the final count\n    return count_seven"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Step 1: Extract even-indexed elements from the input list\n    even_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    \n    # Step 2: Extract odd-indexed elements from the input list\n    odd_elements = [l[i] for i in range(len(l)) if i % 2 != 0]\n    \n    # Step 3: Sort the even-indexed elements\n    even_elements.sort()\n    \n    # Step 4: Initialize an empty result list\n    result = []\n    \n    # Step 5: Iterate through the sorted even-indexed and original odd-indexed elements\n    for i in range(len(even_elements)):\n        # a. Add the current even-indexed element to the result\n        result.append(even_elements[i])\n        \n        # b. If there's a corresponding odd-indexed element, add it to the result\n        if i < len(odd_elements):\n            result.append(odd_elements[i])\n    \n    # Step 6: If there's an extra even-indexed element (input list has odd length), add it to the result\n    if len(even_elements) > len(odd_elements):\n        result.append(even_elements[-1])\n    \n    # Step 7: Return the final result list\n    return result"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Encodes a string by cycling each group of 3 characters twice.\n    \n    Args:\n    s (str): The input string to be encoded.\n    \n    Returns:\n    str: The encoded string.\n    \"\"\"\n    result = \"\"\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        result += group * 2\n    return result\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Decodes a string encoded with the encode_cyclic function.\n    \n    Args:\n    s (str): The input string encoded with encode_cyclic function.\n    \n    Returns:\n    str: The decoded string.\n    \"\"\"\n    # Step 3: Call the encode_cyclic function on the input string 's'\n    encoded_s = encode_cyclic(s)\n    \n    # Step 4: Call the encode_cyclic function again on the result of step 3\n    decoded_s = encode_cyclic(encoded_s)\n    \n    # Step 5: Return the final result, which will be the decoded string\n    return decoded_s"}
{"task_id": "HumanEval/39", "completion": "import math\n\ndef is_prime(p: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if p < 2:\n        return False\n    for i in range(2, int(math.sqrt(p)) + 1):\n        if p % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Return the n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fib_sequence = [0, 1]\n    prime_fib_count = 0\n\n    while True:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        if is_prime(next_fib):\n            prime_fib_count += 1\n            if prime_fib_count == n:\n                return next_fib"}
{"task_id": "HumanEval/40", "completion": "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # Step 2: Iterate through all possible combinations of three distinct elements in the list\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                # Step 5: Check if l[i] + l[j] + l[k] equals 0\n                if l[i] + l[j] + l[k] == 0:\n                    # Step 6: If a combination summing to zero is found, immediately return True\n                    return True\n    # Step 7: If no combination is found after checking all possibilities, return False\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculates the total number of collisions between two sets of cars moving in opposite directions.\n\n    Args:\n    n (int): The number of cars in each set.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car from one set will collide with all cars from the other set.\n    # The total number of collisions is the product of the number of cars in each set.\n    total_collisions = n * n\n\n    return total_collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    # Step 4: Using a list comprehension to perform steps 2-3 in a single line\n    return [e + 1 for e in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # Step 1: Use a nested loop structure to iterate through all possible pairs of numbers in the list.\n    for i, num1 in enumerate(l):\n        for j in range(i+1, len(l)):\n            num2 = l[j]\n            # Step 2: For each pair of numbers, check if their sum is equal to zero.\n            if num1 + num2 == 0:\n                # If a pair sums to zero, immediately return True.\n                return True\n    # Step 3: If no pair sums to zero after checking all possibilities, return False.\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n\n    Action Plan:\n    1. Initialize an empty string to store the result.\n    2. Enter a loop that continues while x is greater than 0:\n       a. Calculate the remainder when x is divided by the new base.\n       b. Convert this remainder to a string and add it to the left side of the result string.\n       c. Update x by integer dividing it by the new base.\n    3. After the loop ends, return the result string.\n\n    Key concepts to remember:\n    - Use modulo (%) to get remainders\n    - Use integer division (//) to update x\n    - Build the string from right to left\n    - Convert numbers to strings before concatenation\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    # Step 3: Implement the calculation\n    area = (a * h) / 2\n    \n    # Step 4: Return the calculated area\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    # Step 1: Initialize a list with the first four elements of the sequence\n    sequence = [0, 0, 2, 0]\n\n    # Step 2: Check if n is less than 4\n    if n < 4:\n        return sequence[n]\n\n    # Step 3: Implement an iterative approach\n    for i in range(4, n + 1):\n        # Calculate the new element by summing the four elements in the list\n        new_element = sum(sequence[-4:])\n        # Append the new element to the end of the list\n        sequence.append(new_element)\n        # Remove the first (oldest) element from the list\n        sequence.pop(0)\n\n    # Step 4: Return the last element of the list as the result\n    return sequence[-1]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Step 1: Sort the input list in ascending order\n    l.sort()\n\n    # Step 2: Determine the length of the sorted list\n    n = len(l)\n\n    # Step 3: Check if the length is odd or even\n    if n % 2 == 0:\n        # If even, calculate the indices of the two middle elements\n        mid1 = n // 2 - 1\n        mid2 = n // 2\n\n        # Compute the average of the two middle elements\n        median_value = (l[mid1] + l[mid2]) / 2.0\n    else:\n        # If odd, calculate the index of the middle element\n        mid = n // 2\n\n        # Return the element at that index\n        median_value = l[mid]\n\n    return median_value"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Step 1: Handle the edge case: an empty string is considered a palindrome\n    if text == '':\n        return True\n\n    # Step 2: Set up a loop to iterate through half of the string\n    for i in range(len(text) // 2):\n        # Step 3a: Compare the character at index i with the character at the opposite end\n        if text[i] != text[len(text) - 1 - i]:\n            # Step 3b: If they don't match, return False immediately\n            return False\n\n    # Step 4: If the loop completes without returning False, return True\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    Args:\n    n (int): The exponent.\n    p (int): The modulo.\n\n    Returns:\n    int: The result of 2^n modulo p.\n\n    Action Plan:\n    1. Initialize a variable to store the result, starting with the base case for 2^0.\n    2. Create a loop that iterates 'n' times to calculate 2^n.\n    3. In each iteration:\n       a. Multiply the current result by 2.\n       b. Apply modulo p to the multiplication result to keep the number small.\n    4. After the loop completes, return the final result.\n    \"\"\"\n    result = 1  # Step 1: Initialize result with base case (2^0 = 1)\n    for _ in range(n):  # Step 2: Iterate 'n' times\n        result = (result * 2) % p  # Step 3a: Multiply by 2 and apply modulo p\n    return result  # Step 4: Return the final result"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    result = \"\"\n    \n    for char in s:\n        # Convert the character to its ASCII value using ord()\n        ascii_val = ord(char)\n        \n        # Subtract 5 from the ASCII value to shift it back\n        ascii_val -= 5\n        \n        # Subtract the ASCII value of 'a' to get a number between 0 and 25\n        num = ascii_val - ord('a')\n        \n        # Use modulo 26 to handle wrap-around cases (e.g., 'a' -> 'v')\n        num = num % 26\n        \n        # Add the ASCII value of 'a' to get back to the correct ASCII range\n        ascii_val = num + ord('a')\n        \n        # Convert the resulting ASCII value back to a character using chr()\n        decoded_char = chr(ascii_val)\n        \n        # Append the decoded character to the result string\n        result += decoded_char\n    \n    return result"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    result = \"\"\n    vowels = set(\"aeiouAEIOU\")\n\n    for char in text:\n        if char not in vowels:\n            result += char\n\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # Step 1: Initialize a loop to iterate through each element in the input list 'l'\n    for num in l:\n        # Step 2a: For each element in the list, check if the element is greater than or equal to the threshold 't'\n        if num >= t:\n            # Step 2b: If true, immediately return False as we've found an element not below the threshold\n            return False\n\n    # Step 3: If the loop completes without returning False, it means all elements are below the threshold\n    # Step 4: Return True after the loop ends\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    # Step 1: Understand the function parameters\n    # x and y are both integers\n\n    # Step 2: Determine the operation to perform\n    # We need to add these two numbers\n\n    # Step 3: Calculate the result\n    result = x + y\n\n    # Step 4: Return the result\n    return result\n\n# Step 5: Verify the solution\n# Check if the function works correctly for the given examples\nassert add(2, 3) == 5, \"add(2, 3) should return 5\"\nassert add(5, 7) == 12, \"add(5, 7) should return 12\""}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n\n    Action Plan:\n    1. Convert both input strings into sets of characters.\n       - This will automatically remove duplicates and ignore order.\n    2. Compare the two sets using set equality (==).\n    3. Return the result of the comparison (True if equal, False otherwise).\n\n    Note: This approach efficiently handles cases with different string lengths\n    and repeated characters.\n\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    return set_s0 == set_s1"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    # Step 1: Check for base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Step 2: Implement the recursive formula\n    # Step 3: Use recursion\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \n    Action Plan:\n    1. Initialize a variable to keep track of the bracket nesting level (let's call it 'depth').\n    2. Iterate through each character in the 'brackets' string:\n       a. If the character is an opening bracket '<':\n          - Increment the depth\n       b. If the character is a closing bracket '>':\n          - Decrement the depth\n       c. After each change to depth, check if it has become negative:\n          - If so, return False immediately (closing bracket without an opening)\n    3. After the loop, check if the final depth is zero:\n       - If it is, return True (all brackets are properly closed)\n       - If not, return False (some opening brackets were not closed)\n    \"\"\"\n    depth = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            depth += 1\n        elif bracket == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    Args:\n    l (list): The input list.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Step 2: Create a sorted version of the input list in ascending order\n    ascending_sorted = sorted(l)\n\n    # Step 3: Create another sorted version of the input list in descending order\n    descending_sorted = sorted(l, reverse=True)\n\n    # Step 4: Compare the original list with both sorted versions\n    is_monotonic = (l == ascending_sorted) or (l == descending_sorted)\n\n    # Step 5: Return True if the list is monotonic, False otherwise\n    return is_monotonic"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 1: Initialize an empty container to store common elements.\n    common_elements = set()\n\n    # Step 2: Iterate through each element in the first list (l1).\n    for element in l1:\n        # Step 3: For each element in l1, check if it exists in the second list (l2).\n        if element in l2:\n            # Step 4: If an element is found in both lists, add it to the container.\n            common_elements.add(element)\n\n    # Step 5: Convert the container to a list of unique elements.\n    common_elements = list(common_elements)\n\n    # Step 6: Sort the list of common elements in ascending order.\n    common_elements.sort()\n\n    # Step 7: Return the sorted list of common elements.\n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "def is_prime(k: int) -> bool:\n    \"\"\"Check if a number k is prime.\n\n    Args:\n    k (int): The number to check.\n\n    Returns:\n    bool: True if k is prime, False otherwise.\n    \"\"\"\n    if k < 2:\n        return False\n    for i in range(2, int(k**0.5) + 1):\n        if k % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n.\n\n    Args:\n    n (int): The number to find the largest prime factor of.\n\n    Returns:\n    int: The largest prime factor of n.\n\n    Examples:\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime = 2\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            largest_prime = i\n    return largest_prime"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n\n    Action Plan:\n    1. Understand the input: 'n' is the upper limit of the range to sum.\n    2. Create a sequence of numbers from 1 to n (inclusive).\n    3. Sum all the numbers in this sequence.\n    4. Return the total sum.\n\n    Implementation steps:\n    1. Consider how to generate a sequence of numbers from 1 to n.\n       Hint: Python has a built-in function to create ranges of numbers.\n    2. Find a way to sum all numbers in the sequence efficiently.\n       Hint: There's a built-in function in Python that can sum iterables.\n    3. Combine the generation of the sequence and the summing operation.\n    4. Return the result of the sum operation.\n    \"\"\"\n    # Step 1: Generate a sequence of numbers from 1 to n (inclusive)\n    sequence = range(1, n + 1)\n\n    # Step 2: Sum all the numbers in the sequence using the built-in sum function\n    total_sum = sum(sequence)\n\n    # Step 4: Return the result of the sum operation\n    return total_sum"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    # Step 1: Initialize a counter variable to keep track of open brackets.\n    open_brackets_counter = 0\n\n    # Step 2: Iterate through each character in the 'brackets' string.\n    for bracket in brackets:\n        # a. If the character is an opening bracket \"(\", increment the counter.\n        if bracket == \"(\":\n            open_brackets_counter += 1\n        # b. If the character is a closing bracket \")\", decrement the counter.\n        elif bracket == \")\":\n            open_brackets_counter -= 1\n        # c. If at any point the counter becomes negative, return False.\n        if open_brackets_counter < 0:\n            return False\n\n    # Step 3: After the iteration, check if the counter is zero.\n    # a. If it's zero, return True (all brackets are properly matched).\n    if open_brackets_counter == 0:\n        return True\n    # b. If it's not zero, return False (there are unmatched opening brackets).\n    else:\n        return False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for index, value in enumerate(xs[1:], start=1):\n        result.append(index * value)\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    # Step 1: Handle the base cases\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Step 2: Implement the recursive formula\n    # Step 3: Efficiency improvements\n    # Using memoization\n    memo = {0: 0, 1: 0, 2: 1}\n\n    def fibfib_memo(n):\n        if n not in memo:\n            memo[n] = fibfib_memo(n-1) + fibfib_memo(n-2) + fibfib_memo(n-3)\n        return memo[n]\n\n    return fibfib_memo(n)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n\n    Action Plan:\n    1. Define a string containing all vowels (both lowercase and uppercase).\n    2. Initialize a counter for vowels.\n    3. Iterate through each character in the input string:\n       - If the character is in the vowels string, increment the counter.\n    4. After the loop, check if the last character of the input string is 'y' or 'Y':\n       - If so, increment the counter by 1.\n    5. Return the final vowel count.\n\n    Additional test cases:\n    >>> vowels_count(\"python\")\n    2\n    >>> vowels_count(\"RHYTHM\")\n    1\n    >>> vowels_count(\"aEiOu\")\n    5\n    >>> vowels_count(\"xyx\")\n    1\n    >>> vowels_count(\"Y\")\n    1\n    >>> vowels_count(\"\")\n    0\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith(\"y\"):\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Step 1: Convert the integer x to a string\n    x_str = str(x)\n    \n    # Step 2: Check if the shift value is greater than the length of the string\n    if shift > len(x_str):\n        # If true, reverse the string and return it\n        return x_str[::-1]\n    \n    # Step 3: If shift is less than or equal to the string length, perform the circular shift\n    else:\n        # Extract the last 'shift' number of characters from the string\n        last_part = x_str[-shift:]\n        # Extract the remaining characters from the beginning of the string\n        first_part = x_str[:-shift]\n        # Concatenate the extracted parts in the new order (last part + first part)\n        result = last_part + first_part\n        \n    # Step 4: Return the resulting string\n    return result"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Write a function that takes a string as input and returns the sum of the upper characters only's ASCII codes.\n    \"\"\"\n    # Step 1: Check if the input string is empty. If so, return 0.\n    if not s:\n        return 0\n\n    # Step 2: Initialize a variable to store the sum of ASCII codes.\n    ascii_sum = 0\n\n    # Step 3: Iterate through each character in the input string\n    for char in s:\n        # Step 3a: Check if the character is uppercase using a string method.\n        if char.isupper():\n            # Step 3b: If uppercase, convert the character to its ASCII code using the ord() function.\n            ascii_sum += ord(char)\n\n    # Step 4: After the iteration, return the final sum.\n    return ascii_sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits.\n    Given the string that represents the total number of the oranges and apples and an integer \n    that represent the total number of the fruits in the basket, return the number of the mango fruits in the basket.\n    For example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Step 1: Initialize an empty list to store the numbers of apples and oranges.\n    fruit_counts = []\n\n    # Step 2: Split the input string 's' into individual words.\n    words = s.split()\n\n    # Step 3: Iterate through each word in the split string.\n    for word in words:\n        # Step 3a: Check if the word is a digit (represents a number).\n        if word.isdigit():\n            # Step 3b: Convert it to an integer and add it to the list.\n            fruit_counts.append(int(word))\n\n    # Step 4: Calculate the sum of all numbers in the list (total apples and oranges).\n    total_apples_oranges = sum(fruit_counts)\n\n    # Step 5: Subtract this sum from the total number of fruits 'n' to get the number of mangoes.\n    mangoes = n - total_apples_oranges\n\n    # Step 6: Return the result (number of mangoes).\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [smalest_value, its index],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\n    Action Plan:\n    1. Check if the input array is empty:\n       - If it is, return an empty list immediately.\n\n    2. Find all even numbers in the array:\n       - Create a new list containing only the even numbers from the input array.\n       - Hint: You can use a list comprehension or filter() function to do this.\n       - Remember, even numbers are divisible by 2 (use the modulo operator %).\n\n    3. Check if there are any even numbers:\n       - If the list of even numbers is empty, return an empty list.\n\n    4. Find the smallest even number:\n       - Use a built-in function to find the minimum value in the list of even numbers.\n\n    5. Find the index of the smallest even number:\n       - Use a built-in function to find the index of the smallest even number in the original input array.\n       - Remember, we need the index from the original array, not the filtered even numbers list.\n\n    6. Return the result:\n       - Create and return a list containing the smallest even number and its index.\n\n    \"\"\"\n    if not arr:\n        return []\n\n    even_numbers = [num for num in arr if num % 2 == 0]\n\n    if not even_numbers:\n        return []\n\n    smallest_even = min(even_numbers)\n    index_of_smallest_even = arr.index(smallest_even)\n\n    return [smallest_even, index_of_smallest_even]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Step 1: Create a frequency counter\n    max_val = max(lst)\n    freq_counter = [0] * (max_val + 1)\n\n    # Step 2: Count the frequencies\n    for num in lst:\n        freq_counter[num] += 1\n\n    # Step 3: Find the greatest valid integer\n    result = -1\n    for num in range(1, max_val + 1):\n        if freq_counter[num] >= num:\n            result = num\n\n    # Step 4: Return the result\n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n\n    Action Plan:\n    1. Initialize an empty result list and a boolean switch variable (True for minimum, False for maximum).\n    2. While the input list is not empty:\n       a. If switch is True, find the minimum value in the input list.\n          If switch is False, find the maximum value in the input list.\n       b. Append the found value to the result list.\n       c. Remove the found value from the input list.\n       d. Toggle the switch variable (change True to False or False to True).\n    3. Return the result list.\n    '''\n    result = []\n    switch = True\n\n    while lst:\n        if switch:\n            min_val = min(lst)\n            result.append(min_val)\n            lst.remove(min_val)\n        else:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n        switch = not switch\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Step 1: Check if the triangle is valid\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n\n    # Step 2: Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Step 3: Use Heron's formula to calculate the area\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Step 4: Round the calculated area to 2 decimal places\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\n    Action Plan:\n    1. Check the weight condition:\n       - Calculate the sum of all elements in the list q\n       - Compare this sum with the maximum weight w\n       - If the sum is greater than w, return False immediately\n\n    2. Check if the list is balanced (palindromic):\n       - Initialize two pointers, one at the start and one at the end of the list\n       - Compare elements at these pointers, moving towards the center\n       - If any pair of elements doesn't match, return False\n\n    3. If both conditions are met:\n       - If we've made it through both checks without returning False, return True\n\n    Remember to handle edge cases, such as empty lists or lists with a single element.\n    '''\n    # Step 1: Check the weight condition\n    if sum(q) > w:\n        return False\n\n    # Step 2: Check if the list is balanced (palindromic)\n    left, right = 0, len(q) - 1\n    while left < right:\n        if q[left] != q[right]:\n            return False\n        left += 1\n        right -= 1\n\n    # Step 3: If both conditions are met, return True\n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n\n    Action Plan:\n    1. Initialize a variable to keep track of the number of changes needed.\n    2. Iterate through the first half of the array:\n       a. Calculate the index for the current element from the start.\n       b. Calculate the index for the corresponding element from the end.\n       c. Compare the elements at these two indices.\n       d. If they are different, increment the change counter.\n    3. Return the total number of changes needed.\n\n    Note: Remember that array indices start at 0, and you'll need to handle the case\n    where the array length is odd correctly.\n    \"\"\"\n    n = len(arr)\n    changes_needed = 0\n\n    for i in range(n // 2):\n        start_index = i\n        end_index = n - i - 1\n\n        if arr[start_index] != arr[end_index]:\n            changes_needed += 1\n\n    return changes_needed"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Step 1: Initialize two variables to store the total character count for each list.\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n\n    # Step 2 and 3: Iterate through the lists and calculate the total character count.\n    # Step 4: Compare the two count variables and return the appropriate list.\n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a number is the multiplication of three prime numbers.\"\"\"\n    if a < 2 or a > 99:\n        return False\n\n    for i in range(2, int(a**(1/3)) + 1):\n        if is_prime(i):\n            for j in range(i, int(a**(1/3)) + 1):\n                if is_prime(j) and a % j == 0:\n                    for k in range(j, int(a**(1/3)) + 1):\n                        if is_prime(k) and i * j * k == a:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\n    Action Plan:\n    1. Handle the special case where n is 1:\n       - If n is 1, x can only be a simple power of n if x is also 1.\n       - Return True if both n and x are 1, False otherwise.\n\n    2. For all other cases, implement the following logic:\n       - Start with a variable (let's call it 'power') initialized to 1.\n       - While 'power' is less than x:\n         * Multiply 'power' by n in each iteration.\n         * This simulates calculating n^1, n^2, n^3, and so on.\n\n    3. After the loop ends, compare 'power' with x:\n       - If they are equal, x is a simple power of n, so return True.\n       - If they are not equal, x is not a simple power of n, so return False.\n\n    4. Ensure your implementation handles both positive and negative inputs for x and n correctly.\n    \"\"\"\n    if n == 1:\n        return x == 1\n\n    power = 1\n    while power < abs(x):\n        power *= n\n\n    return power == abs(x)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    '''\n    # Step 1: Handle the input\n    a = abs(a)\n    \n    # Step 2: Calculate the cube root\n    cube_root = round(a**(1/3))\n    \n    # Step 3: Cube the rounded result\n    cubed_result = cube_root ** 3\n    \n    # Step 4: Compare with the original input\n    if cubed_result == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n\n    Action Plan:\n    1. Create a tuple or set containing the prime hexadecimal digits: '2', '3', '5', '7', 'B', 'D'.\n    2. Initialize a counter variable to 0.\n    3. Iterate through each character in the input string 'num':\n       a. Check if the current character is in the prime hexadecimal digits set/tuple.\n       b. If it is, increment the counter by 1.\n    4. After the iteration is complete, return the final count.\n\n    This plan will efficiently count the number of prime hexadecimal digits in the input string.\n    \"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n\n    Action Plan:\n    1. Understand the input:\n       - The input 'decimal' is an integer in decimal format.\n\n    2. Convert decimal to binary:\n       - Use Python's built-in function bin() to convert the decimal to binary.\n       - The bin() function returns a string starting with '0b', which we need to remove.\n\n    3. Format the binary string:\n       - Add 'db' to the beginning of the binary string.\n       - Add 'db' to the end of the binary string.\n\n    4. Return the final formatted binary string.\n\n    Note: Be careful to remove the '0b' prefix from the bin() function result before adding 'db'.\n    \"\"\"\n    binary_str = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' prefix\n    formatted_binary_str = 'db' + binary_str + 'db'  # Add 'db' to the beginning and end of the binary string\n    return formatted_binary_str"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n\n    Action Plan:\n    1. First, check if the length of the string is less than 3. If so, return False immediately.\n    2. If the length is 3 or more, iterate through the string, examining groups of 3 consecutive characters at a time.\n       Hint: You'll need to stop the iteration 2 characters before the end of the string.\n    3. For each group of 3 characters:\n       - Compare the first character with the second and third\n       - Compare the second character with the third\n       - If any two characters in the group are the same, return False\n    4. If you've gone through all groups of 3 without finding any matches, return True\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n    Action Plan:\n    1. Initialize an empty list to store the letter grades.\n    2. Iterate through each GPA in the input 'grades' list.\n    3. For each GPA, use a series of conditional statements to determine the corresponding letter grade:\n       a. Start with the highest GPA (4.0) and work your way down.\n       b. Use 'if', 'elif', and 'else' statements to cover all possible GPA ranges.\n       c. The conditions should check if the GPA is equal to or greater than the lower bound of each grade range.\n    4. Append the determined letter grade to the output list.\n    5. After processing all GPAs, return the list of letter grades.\n\n    Note: Be careful with the boundary conditions, especially for 4.0 and 0.0 GPAs.\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\n    Action Plan:\n    1. Calculate the length of the input string and store it in a variable.\n    2. Check if the length is 0 or 1. If so, return False as these are not prime numbers.\n    3. Create a loop that iterates from 2 to the length of the string (exclusive):\n       a. Check if the length is divisible by the current number in the loop.\n       b. If it is divisible, return False as the length is not prime.\n    4. If the loop completes without finding any divisors, return True as the length is prime.\n    \"\"\"\n    length = len(string)\n\n    if length <= 1:\n        return False\n\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Step 1: Handle the special case\n    if n == 1:\n        return 1\n\n    # Step 2: Calculate the count of n-digit numbers starting with 1\n    start_with_one = 9 * (10 ** (n - 1))\n\n    # Step 2: Calculate the count of n-digit numbers ending with 1\n    # Note: Numbers ending with 1 have 9 options for the first digit (1-9)\n    # and 10 options for the remaining (n-2) digits\n    end_with_one = 9 * 10 ** (n - 2)\n\n    # Step 3: Combine the calculations\n    # Since numbers that start and end with 1 are counted twice,\n    # we subtract the count of numbers that start and end with 1\n    total_count = start_with_one + end_with_one - (9 * 10 ** (n - 2))\n\n    return total_count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n\n    Action Plan:\n    1. Convert the input integer N to a string to iterate through its digits.\n    2. Create a list of integers by converting each character in the string back to an integer.\n    3. Use the sum() function to calculate the total sum of all digits.\n    4. Convert the sum to its binary representation using the bin() function.\n    5. Remove the '0b' prefix from the binary string to get the final result.\n    6. Return the resulting binary string.\n\n    Hint: Consider using a list comprehension for steps 1-2 and string slicing for step 5.\n    \"\"\"\n    # Step 1: Convert the input integer N to a string\n    N_str = str(N)\n    \n    # Step 2: Create a list of integers by converting each character in the string back to an integer\n    digits = [int(digit) for digit in N_str]\n    \n    # Step 3: Calculate the total sum of all digits\n    total_sum = sum(digits)\n    \n    # Step 4: Convert the sum to its binary representation\n    binary_sum = bin(total_sum)\n    \n    # Step 5: Remove the '0b' prefix from the binary string\n    result = binary_sum[2:]\n    \n    # Step 6: Return the resulting binary string\n    return result"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Action Plan:\n    1. Initialize a variable to store the sum of even elements.\n    2. Iterate through the list starting from index 1 and stepping by 2 to access odd indices.\n    3. For each element at an odd index:\n       a. Check if the element is even (divisible by 2 with no remainder).\n       b. If even, add it to the sum variable.\n    4. After the iteration, return the final sum.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    # Step 1: Initialize a variable to store the sum of even elements\n    sum_even_at_odd_indices = 0\n\n    # Step 2: Iterate through the list starting from index 1 and stepping by 2 to access odd indices\n    for i in range(1, len(lst), 2):\n        # Step 3a: Check if the element is even\n        if lst[i] % 2 == 0:\n            # Step 3b: If even, add it to the sum variable\n            sum_even_at_odd_indices += lst[i]\n\n    # Step 4: Return the final sum\n    return sum_even_at_odd_indices"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    # Step 1: Split the input string 's' into words using the space character as a delimiter.\n    words = s.split(' ')\n\n    # Step 2: For each word in the split result:\n    # a. Convert the word into a list of characters.\n    # b. Sort this list of characters in ascending order.\n    # c. Join the sorted characters back into a string.\n    ordered_words = [''.join(sorted(word)) for word in words]\n\n    # Step 3: Join all the processed words back together with spaces between them.\n    result = ' '.join(ordered_words)\n\n    # Step 4: Return the final joined string.\n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Given a 2 dimensional data, as a nested lists, and an integer x,\n    find integers x in the list, and return list of tuples,\n    [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns),\n    starting with 0. Sort coordinates initially by rows in ascending order,\n    and sort coordinates of the row by columns in descending order.\n    \"\"\"\n    coordinates = []\n\n    # Step 1: Iterate through the rows of the input list 'lst'\n    for i, row in enumerate(lst):\n        # Step 2: Iterate through the elements in the current row\n        for j, element in enumerate(row):\n            # Step 2b: If the element equals the target value 'x'\n            if element == x:\n                # Append the tuple (i, j) to the coordinates list\n                coordinates.append((i, j))\n\n    # Step 3: Sort the coordinates list\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [1, 0, 2, 3, 4, 5]\n\n    Action Plan:\n    1. Check if the input array is empty. If so, return an empty array.\n    2. If the array is not empty:\n       a. Calculate the sum of the first and last elements of the array.\n       b. Determine if this sum is odd or even.\n    3. Create a copy of the input array to avoid modifying the original.\n    4. Sort the copy of the array:\n       - If the sum is odd, sort in ascending order.\n       - If the sum is even, sort in descending order.\n    5. Return the sorted copy of the array.\n    \"\"\"\n    if not array:\n        return []\n\n    array_copy = array.copy()\n    sum_first_last = array_copy[0] + array_copy[-1]\n\n    if sum_first_last % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n        array_copy.sort()\n\n    return array_copy"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # Step 1: Create a string variable containing the lowercase alphabet in order.\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Step 2: Initialize an empty string to store the encrypted result.\n    encrypted_result = ''\n    \n    # Step 3: Iterate through each character in the input string 's'.\n    for char in s:\n        # Check if the character is in the alphabet.\n        if char in alphabet:\n            # Find its index in the alphabet.\n            index = alphabet.index(char)\n            \n            # Calculate the new index by adding 4 (2*2) to the current index.\n            new_index = (index + 4) % 26\n            \n            # Get the character at the new index in the alphabet.\n            encrypted_char = alphabet[new_index]\n            \n            # Append the resulting character to the output string.\n            encrypted_result += encrypted_char\n        else:\n            # If the character is not in the alphabet, keep it unchanged.\n            encrypted_result += char\n    \n    # Step 4: Return the final encrypted string.\n    return encrypted_result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    # Step 1 & 2: Remove duplicates and sort the list\n    unique_sorted_lst = sorted(set(lst))\n    \n    # Step 3: Check if the sorted list of unique elements has at least 2 items\n    if len(unique_sorted_lst) < 2:\n        return None\n    \n    # Step 4: Return the second element (index 1) of the sorted list\n    return unique_sorted_lst[1]"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Step 2: Split the input string S into sentences\n    sentences = re.split(r'[.!?]\\s*', S)\n    \n    # Step 3: Initialize a counter for boredoms\n    boredoms = 0\n    \n    # Step 4: Iterate through the list of sentences\n    boredoms = sum(1 for sentence in sentences if sentence.strip().startswith('I '))\n    \n    # Step 5: Return the final count of boredoms\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Step 1: Check if all input numbers (x, y, and z) are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Step 2: Check if x is equal to the sum of y and z\n    if x == y + z:\n        return True\n    # Step 2: Check if y is equal to the sum of x and z\n    elif y == x + z:\n        return True\n    # Step 2: Check if z is equal to the sum of x and y\n    elif z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Step 1: Define a string containing all vowels (both lowercase and uppercase).\n    vowels = 'aeiouAEIOU'\n    \n    # Step 2: Create a dictionary to map vowels to their replacements.\n    vowel_replacements = {vowel: chr((ord(vowel.lower()) - 97 + 2) % 26 + 97) for vowel in vowels}\n    \n    # Step 3: Swap the case of the entire input message.\n    swapped_message = message.swapcase()\n    \n    # Step 4: Iterate through each character in the case-swapped message.\n    encoded_message = ''.join([\n        vowel_replacements.get(char, char)\n        for char in swapped_message\n    ])\n    \n    # Step 5: Return the encoded message.\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_sum_of_digits(lst):\n    \"\"\"Find the largest prime number in the list and return the sum of its digits.\"\"\"\n    largest_prime = 0\n    for num in lst:\n        if num > largest_prime and is_prime(num):\n            largest_prime = num\n    if largest_prime == 0:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n\n    state = \"start\"\n\n    for key in dict.keys():\n        if not isinstance(key, str):\n            state = \"mixed\"\n            break\n\n        if state == \"start\":\n            if key.isupper():\n                state = \"upper\"\n            elif key.islower():\n                state = \"lower\"\n            else:\n                break\n        else:\n            if state == \"upper\" and not key.isupper():\n                state = \"mixed\"\n            elif state == \"lower\" and not key.islower():\n                state = \"mixed\"\n            else:\n                break\n\n    return state in [\"upper\", \"lower\"]"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Return an array of the first n prime numbers less than n.\"\"\"\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n            if len(primes) == n:\n                break\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\n    Action Plan:\n    1. Extract the unit digit of 'a':\n       - Use the modulo operator (%) with 10 to get the remainder\n       - This will give you the unit digit of 'a'\n\n    2. Extract the unit digit of 'b':\n       - Use the same method as step 1, but for 'b'\n\n    3. Handle negative numbers:\n       - Consider using the absolute value function to ensure\n         positive unit digits\n\n    4. Multiply the extracted unit digits:\n       - Perform the multiplication of the two unit digits\n\n    5. Return the result:\n       - The product of the unit digits is the final result\n\n    Implement the function following these steps to solve the problem.\n    \"\"\"\n    # Extract the unit digit of 'a'\n    unit_digit_a = abs(a) % 10\n\n    # Extract the unit digit of 'b'\n    unit_digit_b = abs(b) % 10\n\n    # Multiply the extracted unit digits\n    result = unit_digit_a * unit_digit_b\n\n    return result"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\n    Action Plan:\n    1. Initialize a counter variable to 0.\n    2. Iterate through the string s, considering only even indices:\n       - Use a for loop with a step of 2 to access even indices.\n    3. For each character at an even index:\n       - Check if it is an uppercase vowel (A, E, I, O, or U).\n       - Tip: You can use the 'in' operator to check if the character is in a string of uppercase vowels.\n    4. If the character is an uppercase vowel, increment the counter.\n    5. After the loop ends, return the final count.\n    \"\"\"\n    upper_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in upper_vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Args:\n        value (str): A string representing a number.\n\n    Returns:\n        int: The closest integer to the input value.\n    \"\"\"\n    import math\n\n    # Step 1: Check if the input string contains a decimal point.\n    if '.' in value:\n        # Remove any trailing zeros after the decimal point.\n        value = value.rstrip('0').rstrip('.')\n\n    # Step 2: Convert the input string to a float.\n    num = float(value)\n\n    # Step 3: Check if the number ends with '.5'\n    if num % 1 == 0.5:\n        # Determine if it's positive or negative\n        if num > 0:\n            # For positive numbers ending in '.5', round up to the next integer.\n            return math.ceil(num)\n        else:\n            # For negative numbers ending in '.5', round down to the next integer.\n            return math.floor(num)\n\n    # Step 4: If the number doesn't end with '.5', use a standard rounding function to get the nearest integer.\n    return round(num)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # Step 1: Initialize an empty list to store the number of stones for each level.\n    stone_pile = []\n\n    # Step 2: Add the first level with n stones to the list.\n    stone_pile.append(n)\n\n    # Step 3: For each subsequent level (from 2 to n):\n    for level in range(2, n + 1):\n        # Step 3a: Calculate the number of stones for the current level.\n        if n % 2 == 0:  # If n is even\n            stones = n + 2 * (level - 1)\n        else:  # If n is odd\n            stones = n + 2 * (level - 1) + 1\n\n        # Step 3b: Add the calculated number to the list\n        stone_pile.append(stones)\n\n    # Step 4: Return the final list containing the number of stones for each level\n    return stone_pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    Action Plan:\n    1. Check if the input string is empty:\n       - If it is, return an empty list\n    \n    2. Replace commas with spaces:\n       - Iterate through each character in the input string\n       - If the character is a comma, replace it with a space\n       - Store the modified characters in a new list\n    \n    3. Join the modified characters:\n       - Combine the list of characters into a single string\n    \n    4. Split the string into words:\n       - Use a string method to split the modified string into a list of words\n    \n    5. Return the resulting list of words\n    \"\"\"\n    if not s:\n        return []\n    \n    modified_chars = [char if char != \",\" else \" \" for char in s]\n    modified_string = \"\".join(modified_chars)\n    words = modified_string.split()\n    \n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n\n    Action Plan:\n    1. Check if x is greater than y. If so, return -1 as there's no valid range.\n    2. Check if y is even. If so, return y as it's the largest even number in the range.\n    3. Check if x equals y. If so, return -1 as there's no even number (since y is odd from step 2).\n    4. If we've reached this point, y is odd and x < y. Return y - 1, which is the largest even number in the range.\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    # Step 1: Check if n is greater than m\n    if n > m:\n        return -1\n\n    # Step 2: Initialize a variable to store the sum of integers\n    total_sum = 0\n\n    # Step 3: Use a loop to iterate from n to m (inclusive) and add each number to the sum\n    for i in range(n, m + 1):\n        total_sum += i\n\n    # Step 4: Calculate the average by dividing the sum by the count of numbers (m - n + 1)\n    avg = total_sum / (m - n + 1)\n\n    # Step 5: Round the average to the nearest integer using the round() function\n    rounded_avg = round(avg)\n\n    # Step 6: Convert the rounded average to binary using the bin() function\n    binary_result = bin(rounded_avg)\n\n    # Step 7: Return the binary result\n    return binary_result"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Step 1: Initialize an empty list to store numbers with only odd digits.\n    result = []\n\n    # Step 2: Iterate through each number in the input list 'x'.\n    for num in x:\n        # Step 3a: Convert the number to a string to check individual digits.\n        num_str = str(num)\n\n        # Step 3b: Check if all digits in the number are odd.\n        if all(int(digit) % 2 != 0 for digit in num_str):\n            # If all digits are odd, add the original number to the result list.\n            result.append(num)\n\n    # Step 4: Sort the result list in ascending order.\n    result.sort()\n\n    # Step 5: Return the sorted list of numbers with only odd digits.\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Step 1: Create a dictionary mapping numbers 1-9 to their string representations.\n    num_to_str = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", \n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n\n    # Step 2: Filter the input array to keep only numbers between 1 and 9 inclusive.\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Step 3: Sort the filtered array in ascending order.\n    sorted_arr = sorted(filtered_arr)\n\n    # Step 4: Reverse the sorted array.\n    reversed_arr = sorted_arr[::-1]\n\n    # Step 5: Create a new array by mapping each number to its string representation using the dictionary.\n    result = [num_to_str[num] for num in reversed_arr]\n\n    # Step 6: Return the resulting array of string representations.\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n\n    Action Plan:\n    1. Initialize an empty list to store the results.\n    2. Iterate through the range of numbers from 1 to n (inclusive).\n    3. For each number i in the range:\n       a. Check if i is even or odd.\n       b. If i is even:\n          - Calculate the factorial of i (multiply all numbers from 1 to i).\n          - Append the result to the list.\n       c. If i is odd:\n          - Calculate the sum of all numbers from 1 to i.\n          - Append the result to the list.\n    4. Return the final list.\n\n    Note: Remember that the index i starts from 1, so adjust your loop accordingly.\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_of_numbers = sum(range(1, i+1))\n            result.append(sum_of_numbers)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Helper function to calculate the sum of digits for a number.\n        Handles negative numbers by keeping track of the sign.\n        \"\"\"\n        sign = -1 if num < 0 else 1\n        num = abs(num)\n        digits = [int(digit) for digit in str(num)]\n        return sign * digits[0] + sum(digits[1:])\n\n    # Handle the edge case of an empty array\n    if not arr:\n        return 0\n\n    # Count how many numbers have a sum of digits greater than 0\n    count = sum(1 for num in arr if sum_of_digits(num) > 0)\n\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Action Plan:\n    1. Check if the input array is empty. If so, return True.\n    2. Create a sorted version of the input array for later comparison.\n    3. Find the minimum value in the input array.\n    4. Find the index of the minimum value.\n    5. Reconstruct the array by concatenating:\n       a. Elements from the minimum value to the end of the array\n       b. Elements from the start of the array to the minimum value (exclusive)\n    6. Compare the reconstructed array with the sorted array:\n       a. Iterate through both arrays simultaneously\n       b. If any elements don't match, return False\n    7. If all elements match, return True\n    \"\"\"\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n\n    reconstructed_arr = arr[min_index:] + arr[:min_index]\n\n    for i in range(len(reconstructed_arr)):\n        if reconstructed_arr[i] != sorted_arr[i]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\n    Action Plan:\n    1. Initialize two counters: one for odd numbers in lst1 and one for even numbers in lst2\n    2. Iterate through lst1:\n       - For each number, check if it's odd (hint: use modulo operator)\n       - If odd, increment the odd counter\n    3. Iterate through lst2:\n       - For each number, check if it's even\n       - If even, increment the even counter\n    4. Compare the counters:\n       - If there are enough or more even numbers in lst2 than odd numbers in lst1, return \"YES\"\n       - Otherwise, return \"NO\"\n    5. Ensure the function returns the correct string value (\"YES\" or \"NO\")\n    \"\"\"\n    odd_count = 0\n    even_count = 0\n\n    for num in lst1:\n        if num % 2 != 0:\n            odd_count += 1\n\n    for num in lst2:\n        if num % 2 == 0:\n            even_count += 1\n\n    if even_count >= odd_count:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    Action Plan:\n    1. Initialize an empty dictionary to store the result.\n    2. Split the input string into a list of individual letters.\n    3. Handle the case of an empty string by returning an empty dictionary.\n    4. Count the occurrences of each letter in the list.\n    5. Find the maximum count among all letters.\n    6. Create a dictionary with all letters that have the maximum count.\n    7. Return the resulting dictionary.\n    \"\"\"\n    result = {}\n    if not test:\n        return result\n\n    letters = test.split()\n    letter_counts = {}\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    max_count = max(letter_counts.values())\n    max_letters = {letter: count for letter, count in letter_counts.items() if count == max_count}\n\n    return max_letters"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \n    Action Plan:\n    1. Create a new string by removing characters:\n       a. Iterate through each character in s\n       b. If the character is not in c, add it to the new string\n    \n    2. Check if the new string is a palindrome:\n       a. Compare the new string with its reverse\n    \n    3. Return the result:\n       a. Create a tuple with the new string and the palindrome check result\n       b. Return the tuple\n    \"\"\"\n    # Step 1: Create a new string by removing characters\n    new_string = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the new string is a palindrome\n    is_palindrome = new_string == new_string[::-1]\n    \n    # Step 3: Return the result\n    return (new_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    # Step 1: Initialize an empty list to store the results.\n    results = []\n\n    # Step 2: Iterate through each string in the input list 'lst'.\n    for i, string in enumerate(lst):\n        # Step 3a: Count the number of odd digits in the string.\n        odd_count = sum(int(digit) % 2 != 0 for digit in string)\n\n        # Step 3b: Create the output string by replacing all occurrences of 'i' with the count.\n        output_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {i+1}nput.\"\n\n        # Step 3c: Add the formatted string to the results list.\n        results.append(output_string)\n\n    # Step 4: Return the results list.\n    return results"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Step 1: Initialize two variables\n    max_sum = 0\n    current_sum = 0\n\n    # Step 2: Iterate through each number in the input array 'nums'\n    for num in nums:\n        # a. Negate the current number\n        negated_num = -num\n\n        # b. Add the negated number to current_sum\n        current_sum += negated_num\n\n        # c. If current_sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n        # d. Update max_sum if current_sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    # Step 3: Check if max_sum is still 0\n    if max_sum == 0:\n        # If it is, find the maximum of the negated numbers in the array\n        return max(nums)\n\n    # Step 4: Calculate the final result\n    # The minimum sum of the original array is the negative of max_sum\n    return -max_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    # Step 2: Create a list comprehension to process each row (well) in the grid\n    bucket_lowerings = [math.ceil(sum(row) / capacity) for row in grid]\n    # Step 3: Sum up all the rounded-up values from the list comprehension\n    total_lowerings = sum(bucket_lowerings)\n    # Step 4: Return the final sum\n    return total_lowerings"}
{"task_id": "HumanEval/116", "completion": "def count_ones_in_binary(num):\n    \"\"\"\n    Helper function to count the number of '1's in the binary representation of a number.\n    \"\"\"\n    binary_representation = bin(num)[2:]\n    return binary_representation.count('1')\n\ndef sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation in ascending order.\n    For similar number of ones, sorts based on decimal value.\n    \"\"\"\n    # Step 1: Sort the array based on decimal values\n    arr = sorted(arr)\n\n    # Step 2: Sort the array based on the count of '1's in binary representation\n    arr = sorted(arr, key=count_ones_in_binary)\n\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n    Action Plan:\n    1. Initialize an empty list to store the result.\n    2. Split the input string 's' into individual words.\n    3. Define a set of vowels (a, e, i, o, u) to identify consonants.\n    4. Iterate through each word in the split string:\n       a. Initialize a consonant counter for the current word.\n       b. Iterate through each character in the word:\n          - If the lowercase version of the character is not in the vowel set, increment the consonant counter.\n       c. After counting consonants, check if the count equals the input 'n'.\n       d. If the count matches 'n', append the word to the result list.\n    5. Return the result list containing words with exactly 'n' consonants.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    result = []\n\n    words = s.split()\n\n    for word in words:\n        consonant_count = 0\n        for char in word.lower():\n            if char not in vowels:\n                consonant_count += 1\n\n        if consonant_count == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n\n    Action Plan:\n    1. Check if the word length is less than 3. If so, return an empty string.\n    2. Create a set of vowels (both lowercase and uppercase).\n    3. Iterate through the word from right to left, starting from the second-to-last character:\n       a. Check if the current character is a vowel.\n       b. If it is a vowel, check if the characters on both sides are consonants.\n       c. If both conditions are met, return the current vowel.\n    4. If no vowel is found between consonants, return an empty string.\n\n    Implement the function following this plan to solve the problem.\n    \"\"\"\n    vowels = set(\"aeiouAEIOU\")\n\n    if len(word) < 3:\n        return \"\"\n\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if i > 1 and word[i-2] not in vowels and word[i-1] not in vowels:\n                return word[i]\n            elif i == 1 and word[i-1] not in vowels:\n                return word[i]\n\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def is_balanced(s):\n    \"\"\"\n    Helper function to check if a string of parentheses is balanced.\n    \"\"\"\n    counter = 0\n    for char in s:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n\ndef match_parens(lst):\n    \"\"\"\n    Check if it's possible to concatenate two strings in some order to form a good string.\n    \"\"\"\n    # Step 1: Concatenate the strings in both possible orders\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n\n    # Step 2: Check if either S1 or S2 is balanced\n    if is_balanced(S1):\n        return 'Yes'\n    elif is_balanced(S2):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    :param arr: List of integers\n    :param k: Positive integer\n    :return: List of k maximum numbers in arr\n    \"\"\"\n    # Step 1: Handle the edge case\n    if k == 0:\n        return []\n\n    # Step 2: Sort the input array\n    arr.sort()\n\n    # Step 3: Select the maximum k elements\n    result = arr[-k:]\n\n    # Step 4: Return the result\n    return result"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Action Plan:\n    1. Initialize a variable to store the sum, starting at 0.\n    2. Iterate through the list using enumeration to access both index and value.\n    3. For each element:\n       a. Check if its position is even (index % 2 == 0).\n       b. If so, check if the element itself is odd (element % 2 == 1).\n       c. If both conditions are true, add the element to the sum.\n    4. After the iteration, return the final sum.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    sum_odd_even_positions = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 == 1:\n            sum_odd_even_positions += value\n    return sum_odd_even_positions"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    :param arr: a non-empty array of integers\n    :param k: an integer representing the number of elements to consider\n    :return: the sum of the elements with at most two digits from the first k elements of arr\n    \"\"\"\n    # Step 1: Limit the array to the first k elements\n    limited_arr = arr[:k]\n\n    # Step 2: Filter elements with at most two digits\n    filtered_elements = [element for element in limited_arr if len(str(element)) <= 2]\n\n    # Step 4: Sum the filtered elements\n    result = sum(filtered_elements)\n\n    # Step 5: Return the calculated sum\n    return result"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    # Step 1: Initialize an empty list to store odd numbers in the Collatz sequence.\n    odd_numbers = []\n\n    # Step 2: Check if the input n is odd. If so, add it to the list.\n    if n % 2 != 0:\n        odd_numbers.append(n)\n\n    # Step 3: Implement a loop that continues until n becomes 1\n    while n != 1:\n        # Step 3a: If n is even, divide it by 2.\n        if n % 2 == 0:\n            n = n // 2\n        # Step 3b: If n is odd, multiply it by 3 and add 1.\n        else:\n            n = n * 3 + 1\n        # Step 3c: If the new n is odd, add it to the list.\n        if n % 2 != 0:\n            odd_numbers.append(n)\n\n    # Step 4: Ensure that 1 is added to the list if it's not already present.\n    if 1 not in odd_numbers:\n        odd_numbers.append(1)\n\n    # Step 5: Sort the list in ascending order.\n    odd_numbers.sort()\n\n    # Step 6: Return the sorted list of odd numbers.\n    return odd_numbers"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid, otherwise False.\"\"\"\n    try:\n        # Remove leading or trailing whitespace\n        date = date.strip()\n        \n        # Split the date string into month, day, and year components\n        month, day, year = date.split('-')\n        \n        # Convert components to integers\n        month, day, year = int(month), int(day), int(year)\n        \n        # Check if the month is valid (between 1 and 12)\n        if not 1 <= month <= 12:\n            return False\n        \n        # Lists of months with 31 days and 30 days\n        months_31_days = [1, 3, 5, 7, 8, 10, 12]\n        months_30_days = [4, 6, 9, 11]\n        \n        # Check day validity based on the month\n        if month in months_31_days:\n            if not 1 <= day <= 31:\n                return False\n        elif month in months_30_days:\n            if not 1 <= day <= 30:\n                return False\n        elif month == 2:\n            if not 1 <= day <= 29:\n                return False\n            # Check for leap year\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                if day > 29:\n                    return False\n        else:\n            return False\n        \n        return True\n    \n    except Exception:\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # Step 1: Check if the input string contains any whitespace characters.\n    if any(char.isspace() for char in txt):\n        return txt.split()\n\n    # Step 2: If no whitespace is found, check if the string contains any commas.\n    elif ',' in txt:\n        txt = txt.replace(',', ' ')\n        return txt.split()\n\n    # Step 3: If neither whitespace nor commas are found:\n    else:\n        count = 0\n        for char in txt:\n            # Check if the character is lowercase.\n            if char.islower():\n                # Calculate its position in the alphabet (0-25).\n                char_ord = ord(char) - ord('a')\n                # If the position is even (odd order in the alphabet), increment the counter.\n                if char_ord % 2 != 0:\n                    count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Handle edge cases\n    if len(lst) <= 1:\n        return True\n\n    # Check for duplicates\n    num_counts = {}\n    for num in lst:\n        if num in num_counts:\n            num_counts[num] += 1\n            if num_counts[num] > 2:\n                return False\n        else:\n            num_counts[num] = 1\n\n    # Check if the list is sorted\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num in (0, 1):\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the length of the intersection of two intervals is a prime number.\"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"\n    # Step 1: Check if the input array is empty. If so, return None.\n    if not arr:\n        return None\n\n    # Step 2: Calculate the product of signs\n    has_zero = 0 in arr\n    negatives = sum(1 for num in arr if num < 0)\n    product_of_signs = -1 if negatives % 2 else 1 if not has_zero else 0\n\n    # Step 3: Calculate the sum of absolute values of all numbers in the array\n    sum_of_abs_values = sum(abs(num) for num in arr)\n\n    # Step 4: Multiply the product of signs by the sum of absolute values\n    result = product_of_signs * sum_of_abs_values\n\n    # Step 5: Return the final result\n    return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    val = float('inf')\n\n    # Find the position of 1 in the grid\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                neighbors = []\n                if i > 0:\n                    neighbors.append(grid[i-1][j])\n                if j > 0:\n                    neighbors.append(grid[i][j-1])\n                if i < n-1:\n                    neighbors.append(grid[i+1][j])\n                if j < n-1:\n                    neighbors.append(grid[i][j+1])\n                val = min(val, min(neighbors))\n\n    # Create the path\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n\n    return ans"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    # Step 1: Handle the base case\n    if n == 0:\n        return [1]\n\n    # Step 2: Initialize the sequence\n    sequence = [1, 3]\n\n    # Step 3: Implement the main loop\n    for i in range(2, n + 1):\n        # Step 4: Calculate terms based on even or odd index\n        if i % 2 == 0:\n            next_term = 1 + i / 2\n        else:\n            next_term = sequence[i - 1] + sequence[i - 2] + sequence[i - 1] // 2\n\n        # Step 5: Append each calculated term to the sequence list\n        sequence.append(next_term)\n\n    # Step 6: Return the complete sequence list\n    return sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Step 1: Initialize variables to store the product of odd digits and count of odd digits.\n    product = 1\n    odd_count = 0\n\n    # Step 2: Convert the input number to a string to iterate through its digits.\n    n_str = str(n)\n\n    # Step 3: For each digit in the number\n    for digit in n_str:\n        # a. Convert the digit back to an integer.\n        digit_int = int(digit)\n\n        # b. Check if the digit is odd (hint: use modulo operator).\n        if digit_int % 2 != 0:\n            # c. If odd, multiply it with the product and increment the odd count.\n            product *= digit_int\n            odd_count += 1\n\n    # Step 4: After the loop, check if any odd digits were found\n    if odd_count == 0:\n        # If no odd digits (count is 0), return 0.\n        return 0\n    else:\n        # Otherwise, return the calculated product.\n        return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    \"\"\"\n    opening_brackets = []\n    closing_brackets = []\n\n    # Step 1: Initialize two empty lists to store the indices of opening and closing brackets.\n    for i, char in enumerate(string):\n        if char == '[':\n            opening_brackets.append(i)\n        elif char == ']':\n            closing_brackets.append(i)\n\n    # Step 3: Reverse the closing brackets list to match the order of nested brackets.\n    closing_brackets.reverse()\n\n    nested_brackets_counter = 0\n    closing_bracket_index = 0\n\n    # Step 5: Iterate through the opening brackets list\n    for opening_bracket_index in opening_brackets:\n        # Step 5a: If there are still closing brackets to check and the current opening bracket\n        # index is less than the current closing bracket index:\n        while closing_bracket_index < len(closing_brackets) and opening_bracket_index < closing_brackets[closing_bracket_index]:\n            nested_brackets_counter += 1\n            closing_bracket_index += 1\n\n    # Step 6: Return True if the nested brackets counter is 2 or more, False otherwise.\n    return nested_brackets_counter >= 2"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    Action Plan:\n    1. Import the 'math' module to use the ceiling function.\n    2. Initialize a variable (e.g., 'result') to 0 to store the sum of squared numbers.\n    3. Iterate through each number in the input list 'lst'.\n    4. For each number:\n       a. Use math.ceil() to round it up to the nearest integer.\n       b. Square the rounded number.\n       c. Add the squared value to the 'result' variable.\n    5. After the loop, return the 'result' variable containing the sum of squared numbers.\n    \"\"\"\n    result = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        result += squared_num\n    return result"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n\n    Action Plan:\n    1. Handle the edge case: If the input string is empty, return False.\n    2. Split the input string into words using space as the delimiter.\n    3. Extract the last element from the split result.\n    4. Check if the last element is a single character:\n       - If it's not a single character, return False.\n    5. If it is a single character, check if it's a letter:\n       - You can use ASCII values or a built-in method to check if it's a letter.\n       - Make sure to consider both uppercase and lowercase letters.\n    6. Return True if it's a letter, False otherwise.\n    '''\n    if not txt:\n        return False\n\n    words = txt.split(' ')\n    last_word = words[-1]\n\n    if len(last_word) != 1:\n        return False\n\n    last_char = last_word[0]\n    if last_char.isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n\n    Action Plan:\n    1. Initialize a variable to store the largest index, set it to -1.\n    2. Start a loop from index 1 to the end of the array:\n       a. Compare the current element with the previous element.\n       b. If the current element is less than the previous element:\n          - Update the largest index variable with the current index.\n    3. After the loop ends, return the largest index variable.\n\n    Note: This plan ensures we find the largest index satisfying the condition,\n    and returns -1 if no such index is found.\n    \"\"\"\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n\n    Action Plan:\n    1. Initialize two variables to store the largest negative and smallest positive integers, both set to None.\n    2. Iterate through the input list:\n       a. If an element is negative and either larger than the current largest negative or the largest negative is None, update the largest negative.\n       b. If an element is positive and either smaller than the current smallest positive or the smallest positive is None, update the smallest positive.\n    3. Return a tuple containing the largest negative and smallest positive integers.\n    '''\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Step 1: Create temporary variables to store the original inputs\n    temp_a = a\n    temp_b = b\n\n    # Step 2: Convert string inputs\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(',', '.')\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(',', '.')\n\n    # Step 3: Convert all inputs to float for comparison\n    a = float(temp_a)\n    b = float(temp_b)\n\n    # Step 4: Compare the float values\n    if a == b:\n        return None\n\n    # Step 5: Determine the larger value\n    if a > b:\n        return temp_a\n    else:\n        return temp_b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Step 1: Check if the input number n is even\n    if n % 2 != 0:\n        return False\n\n    # Step 2: Determine the minimum possible sum of 4 positive even numbers\n    min_sum = 4 * 2  # The smallest positive even number is 2, and we need 4 of them\n\n    # Step 3: Check if n is greater than or equal to the minimum sum\n    if n < min_sum:\n        return False\n\n    # Step 4: Combine the results from steps 1 and 3 using logical AND\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n\n    Action Plan:\n    1. Initialize two variables:\n       - One to store the factorial of the current number (current_factorial)\n       - One to store the accumulating special factorial result (special_factorial_result)\n\n    2. Create a loop that iterates from 1 to n (inclusive)\n\n    3. Inside the loop:\n       a. Update the factorial of the current number (current_factorial)\n       b. Multiply the special factorial result by the current factorial\n\n    4. After the loop ends, return the final special factorial result\n    \"\"\"\n    current_factorial = 1\n    special_factorial_result = 1\n\n    for i in range(1, n + 1):\n        current_factorial *= i\n        special_factorial_result *= current_factorial\n\n    return special_factorial_result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    space_counter = 0\n    consecutive_spaces = 0\n\n    for char in text:\n        if char == \" \":\n            space_counter += 1\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result += \"-\"\n                consecutive_spaces = 0\n            elif consecutive_spaces > 0:\n                result += \"_\"\n                consecutive_spaces = 0\n            result += char\n            consecutive_spaces = 0\n\n    # Handle trailing spaces\n    if consecutive_spaces > 0:\n        if consecutive_spaces > 2:\n            result += \"-\"\n        elif consecutive_spaces > 0:\n            result += \"_\"\n\n    return result"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    \"\"\"\n    # Step 1: Define a list of valid file extensions\n    valid_extensions = ['txt', 'exe', 'dll']\n\n    # Step 2: Split the file_name string using '.' as the separator\n    parts = file_name.split('.')\n\n    # Step 3: Check if the split result has exactly 2 parts\n    if len(parts) != 2:\n        return 'No'\n\n    # Step 4: Check if the extension (second part) is in the list of valid extensions\n    if parts[1] not in valid_extensions:\n        return 'No'\n\n    # Step 5: Check if the name part (first part) is not empty\n    if not parts[0]:\n        return 'No'\n\n    # Step 6: Check if the first character of the name part is a letter\n    if not parts[0][0].isalpha():\n        return 'No'\n\n    # Step 7: Count the number of digits in the name part\n    digit_count = sum(c.isdigit() for c in parts[0])\n\n    # Step 8: If all checks pass, return 'Yes'\n    if digit_count > 3:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n\n    Action Plan:\n    1. Initialize an empty list to store the modified values.\n    2. Iterate through the input list using enumerate to access both index and value.\n    3. For each item:\n       a. If the index is divisible by 3 (use modulo operator), square the value.\n       b. Else if the index is divisible by 4 (use modulo operator) and not by 3, cube the value.\n       c. Else, keep the original value.\n    4. Append the resulting value (modified or original) to the new list.\n    5. After the loop, use the sum() function to calculate the sum of all values in the new list.\n    6. Return the calculated sum.\n\n    Note: Remember to handle the case of an empty input list, which should return 0.\n    \"\"\"\n    modified_values = []\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            modified_values.append(value ** 2)\n        elif index % 4 == 0 and index % 3 != 0:\n            modified_values.append(value ** 3)\n        else:\n            modified_values.append(value)\n    return sum(modified_values)"}
{"task_id": "HumanEval/143", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing words from the original sentence whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n\n    Action Plan:\n    1. Parse the input fractions:\n       a. Split each fraction string into numerator and denominator.\n       b. Convert the split strings to integers.\n\n    2. Calculate the product of the fractions:\n       a. Multiply the numerators of x and n.\n       b. Multiply the denominators of x and n.\n\n    3. Check if the result is a whole number:\n       a. Divide the product's numerator by its denominator.\n       b. Check if the result is equal to its integer value.\n\n    4. Return the result:\n       a. If the result is a whole number, return True.\n       b. Otherwise, return False.\n    \"\"\"\n    # Step 1: Parse the input fractions\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    # Step 2: Calculate the product of the fractions\n    product_num = x_num * n_num\n    product_denom = x_denom * n_denom\n\n    # Step 3: Check if the result is a whole number\n    result = product_num / product_denom\n\n    # Step 4: Return the result\n    return result.is_integer()"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, they are ordered based on their index in the original list.\n\n    Args:\n    nums (List[int]): The list of integers to be sorted.\n\n    Returns:\n    List[int]: The sorted list of integers.\n\n    Example:\n    >>> order_by_points([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n    \"\"\"\n\n    # Step 1: Define a helper function to calculate the sum of digits for a number\n    def sum_of_digits(n):\n        \"\"\"\n        Calculates the sum of digits for a given number.\n        Handles both positive and negative numbers.\n        \"\"\"\n        str_n = str(abs(n))  # Convert the number to a string to easily access its digits\n        return sum(int(digit) for digit in str_n) + (n < 0)  # Sum the digits and keep the sign of the original number\n\n    # Step 2: Use Python's sorted() function on the input list\n    # Provide a custom key function that uses the helper function\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    # Step 3: Return the sorted list\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    # Step 1: Initialize a counter variable to keep track of numbers meeting the criteria.\n    count = 0\n\n    # Step 2: Iterate through each number in the input array 'nums'.\n    for num in nums:\n        # Step 3: Check if the number is greater than 10.\n        if num > 10:\n            # Step 4: Convert the number to a string and check if the first and last digits are odd.\n            num_str = str(num)\n            if int(num_str[0]) % 2 == 1 and int(num_str[-1]) % 2 == 1:\n                # If both first and last digits are odd, increment the counter.\n                count += 1\n\n    # Step 5: Return the final count.\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example:\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\n    Action Plan:\n    1. Generate the array 'a':\n       - Create a list comprehension that calculates a[i] for i from 1 to n\n       - Use the formula: i * i - i + 1\n\n    2. Initialize a counter for valid triples\n\n    3. Implement three nested loops to iterate through all possible triples:\n       - Outer loop: i from 0 to n-3\n       - Middle loop: j from i+1 to n-2\n       - Inner loop: k from j+1 to n-1\n\n    4. Inside the innermost loop:\n       - Calculate the sum of a[i], a[j], and a[k]\n       - Check if the sum is divisible by 3 (use the modulo operator)\n       - If divisible by 3, increment the counter\n\n    5. Return the final count of valid triples\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    \"\"\"\n    Returns a tuple of planets whose orbits are located between the orbit of planet1 and planet2, sorted by proximity to the sun.\n    \"\"\"\n    # Step 1: Create a tuple of planet names in order from closest to farthest from the Sun.\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\n    # Step 2: Check if both planet1 and planet2 are in the tuple of planet names and are different.\n    if planet1 not in planets or planet2 not in planets or planet1 == planet2:\n        return ()\n\n    # Step 3: Find the index of planet1 and planet2 in the tuple of planet names.\n    index_planet1 = planets.index(planet1)\n    index_planet2 = planets.index(planet2)\n\n    # Step 4: Determine which planet is closer to the Sun by comparing their indices.\n    if index_planet1 < index_planet2:\n        start_index = index_planet1 + 1\n    else:\n        start_index = index_planet2 + 1\n\n    # Step 5: Extract the planets between the two input planets.\n    planets_between = planets[start_index:index_planet2]\n\n    # Step 6: Return the result as a tuple.\n    return tuple(planets_between)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Step 1: Initialize an empty list to store the filtered strings.\n    filtered_list = []\n\n    # Step 2: Iterate through each string in the input list.\n    for string in lst:\n        # Check if the length of the string is even.\n        if len(string) % 2 == 0:\n            # If even, add the string to the filtered list.\n            filtered_list.append(string)\n\n    # Step 3: Sort the filtered list.\n    # First, sort alphabetically to handle ties in length.\n    filtered_list.sort()\n    # Then, sort by length in ascending order.\n    filtered_list.sort(key=len)\n\n    # Step 4: Return the sorted and filtered list.\n    return filtered_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    Action Plan:\n    1. Handle the special case:\n       - Check if n is 1, which is not considered prime\n       - If n is 1, return y\n\n    2. Implement primality check:\n       - Use a loop to iterate from 2 to n-1\n       - In each iteration, check if n is divisible by the current number\n       - If n is divisible by any number in this range, it's not prime\n       - If a divisor is found, return y\n\n    3. Handle the prime case:\n       - If the loop completes without finding any divisors, n is prime\n       - In this case, return x\n\n    Note: Be careful with the loop implementation to ensure correct behavior for both prime and non-prime numbers.\n    \"\"\"\n    # Step 1: Handle the special case\n    if n == 1:\n        return y\n\n    # Step 2: Implement primality check\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n\n    # Step 3: Handle the prime case\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    Parameters:\n    lst (list): A list of numbers\n    \n    Returns:\n    int: The sum of squares of the numbers in the list that are odd.\n    \"\"\"\n    # Step 1: Initialize a variable to store the sum of squares, set it to 0.\n    sum_of_squares = 0\n    \n    # Step 2: Iterate through each number in the input list\n    # and apply the conditions mentioned in the Action Plan\n    sum_of_squares += sum(x**2 for x in lst if x > 0 and isinstance(x, int) and x % 2 != 0)\n    \n    # Step 3: After the iteration, return the final sum.\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Determine if a person correctly guessed the results of a number of matches.\n    \n    Parameters:\n    game (list): A list of actual scores.\n    guess (list): A list of guessed scores.\n    \n    Returns:\n    list: A list of differences between the guessed and actual scores.\n    \"\"\"\n    # Step 1: Initialize an empty result list\n    result = []\n    \n    # Step 2: Iterate through both 'game' and 'guess' lists simultaneously\n    for actual, guessed in zip(game, guess):\n        # Step 3a: If the guess is correct, append 0 to the result list\n        if actual == guessed:\n            result.append(0)\n        # Step 3b: If the guess is incorrect, calculate the absolute difference\n        else:\n            result.append(abs(actual - guessed))\n    \n    # Step 4: Return the result list\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    # Step 1: Initialize variables\n    strongest_extension = extensions[0]\n    strongest_strength = calculate_strength(strongest_extension)\n\n    # Step 2: Iterate through all extensions\n    for extension in extensions[1:]:\n        extension_strength = calculate_strength(extension)\n        # Compare the strength with the current strongest\n        if extension_strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = extension_strength\n\n    # Step 3: Format the result\n    result = f\"{class_name}.{strongest_extension}\"\n\n    return result\n\ndef calculate_strength(extension):\n    \"\"\"Calculate the strength of an extension.\"\"\"\n    uppercase_count = sum(1 for char in extension if char.isupper())\n    lowercase_count = sum(1 for char in extension if char.islower())\n    return uppercase_count - lowercase_count"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    # Step 1: Store the length of the second word (b) in a variable\n    b_length = len(b)\n\n    # Step 2: Create a pattern string that contains all possible rotations of b\n    pattern = b + b\n\n    # Step 3: Iterate through the first word (a)\n    for i in range(len(a) - b_length + 1):\n        # Step 4: For each substring in 'a', check if it matches any rotation of b in the pattern string\n        substring = a[i:i+b_length]\n        for j in range(len(pattern) - b_length + 1):\n            if substring == pattern[j:j+b_length]:\n                return True\n\n    # Step 5: If no match is found after checking all substrings, return False\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Step 1: Initialize two variables to count even and odd digits, both set to 0.\n    even_count = 0\n    odd_count = 0\n\n    # Step 2: Convert the absolute value of the input number to a string to iterate through its digits.\n    num_str = str(abs(num))\n\n    # Step 3: Iterate through each character (digit) in the string\n    for digit in num_str:\n        # a. Convert the character back to an integer.\n        digit_int = int(digit)\n\n        # b. Check if the integer is even or odd using the modulo operator (% 2).\n        if digit_int % 2 == 0:\n            # c. Increment the appropriate counter based on whether the digit is even or odd.\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Step 4: After the iteration, return a tuple containing the even count and odd count.\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n\n    Action Plan:\n    1. Create two lists:\n       - One for integer values in descending order (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n       - One for corresponding Roman numeral symbols (M, CM, D, CD, C, XC, L, XL, X, IX, V, IV, I)\n\n    2. Initialize an empty result string.\n\n    3. Iterate through the integer values list:\n       a. Divide the input number by the current integer value.\n       b. If the result is not zero:\n          - Append the corresponding Roman numeral symbol to the result string that many times.\n          - Subtract the used portion from the input number.\n\n    4. Repeat step 3 until the input number becomes zero.\n\n    5. Convert the result string to lowercase.\n\n    6. Return the final result string.\n    \"\"\"\n    int_values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_symbols = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n\n    result = \"\"\n\n    for i in range(len(int_values)):\n        count = number // int_values[i]\n        result += roman_symbols[i] * count\n        number %= int_values[i]\n\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Step 2: Square each side length\n    a_squared, b_squared, c_squared = a*a, b*b, c*c\n    \n    # Step 3: Check all three possible configurations of the triangle\n    is_right_angled = (a_squared == b_squared + c_squared) or \\\n                      (b_squared == a_squared + c_squared) or \\\n                      (c_squared == a_squared + b_squared)\n    \n    # Step 5: Return the result of the boolean expression\n    return is_right_angled"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\"aaaaaaa\"\n\n    Action Plan:\n    1. Understand the input:\n       - 'words' is a list of strings\n\n    2. For each word in the list:\n       a. Count the number of unique characters\n          Hint: Consider using a set to get unique characters\n\n    3. Determine the maximum number of unique characters among all words\n\n    4. Create a list of words that have the maximum number of unique characters\n\n    5. If there are multiple words with the same maximum number of unique characters:\n       a. Sort these words lexicographically (alphabetically)\n\n    6. Return the first word from the sorted list of words with maximum unique characters\n\n    Note: Consider using a sorting function with a custom key that takes into account\n    both the number of unique characters (in descending order) and the lexicographical\n    order of the words.\n    \"\"\"\n    max_unique_chars = 0\n    max_unique_words = []\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_unique_words = [word]\n        elif unique_chars == max_unique_chars:\n            max_unique_words.append(word)\n\n    max_unique_words.sort()\n    return max_unique_words[0]"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Action Plan:\n    1. Compare the number of carrots needed (@need) with the number of remaining carrots (@remaining).\n    2. If there are enough remaining carrots:\n       a. Calculate the total number of eaten carrots (already eaten + needed).\n       b. Calculate the number of carrots left after eating.\n    3. If there are not enough remaining carrots:\n       a. Calculate the total number of eaten carrots (already eaten + all remaining).\n       b. Set the number of carrots left to 0.\n    4. Return the result as a list with two elements:\n       [total number of eaten carrots, number of carrots left]\n    \"\"\"\n    if remaining >= need:\n        total_eaten = number + need\n        remaining_left = remaining - need\n    else:\n        total_eaten = number + remaining\n        remaining_left = 0\n    \n    return [total_eaten, remaining_left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, \n    and the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Action Plan:\n    1. Initialize a string variable 'expression' with the first operand from the 'operand' list.\n    2. Use a loop to iterate through the 'operator' list and the remaining elements of the 'operand' list simultaneously:\n       - Hint: Consider using the zip() function to pair operators with operands.\n    3. In each iteration of the loop:\n       - Append the current operator to the 'expression' string.\n       - Append the current operand to the 'expression' string.\n    4. After the loop, use a built-in Python function to evaluate the 'expression' string as a mathematical expression.\n    5. Return the result of the evaluation.\n\n    \"\"\"\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Step 1: Initialize a flag to check if any letters are found in the string.\n    has_letter = False\n\n    # Step 2: Create a mutable version of the input string (e.g., a list of characters).\n    s_list = list(s)\n\n    # Step 3: Iterate through each character in the input string.\n    for i, char in enumerate(s_list):\n        # Check if the character is a letter.\n        if char.isalpha():\n            # Change its case (lower to upper or vice versa).\n            if char.islower():\n                s_list[i] = char.upper()\n            else:\n                s_list[i] = char.lower()\n            # Set the flag to indicate a letter was found.\n            has_letter = True\n\n    # Step 5: Check the flag.\n    if not has_letter:\n        # If no letters were found, reverse the entire string.\n        s_list.reverse()\n\n    # Step 6: Convert the modified list of characters back into a string and return the final result.\n    return ''.join(s_list)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\n    Action Plan:\n    1. Import the necessary module for MD5 hashing (hint: look into the 'hashlib' module)\n    2. Check if the input 'text' is an empty string\n       - If it is, return None immediately\n    3. If 'text' is not empty:\n       a. Convert the input string to bytes (consider using encode method with 'ascii' encoding)\n       b. Create an MD5 hash object\n       c. Update the hash object with the bytes from step 3a\n       d. Generate the hexadecimal representation of the hash (look for a method that returns a string)\n    4. Return the resulting hash string\n    \"\"\"\n    if not text:\n        return None\n\n    text_bytes = text.encode('ascii')\n    md5_hash = hashlib.md5()\n    md5_hash.update(text_bytes)\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n\n    Action Plan:\n    1. Determine the lower and upper bounds:\n       - Consider that a and b can be in any order\n       - The lower bound should be the smaller of a and b, but not less than 2\n       - The upper bound should be the larger of a and b, but not more than 8\n       - Hint: Use min() and max() functions to handle this logic\n\n    2. Generate a list of even integers:\n       - Create a list comprehension that:\n         a. Iterates through the range from the lower bound to the upper bound (inclusive)\n         b. Includes only even numbers in the result\n       - Hint: Use the modulo operator (%) to check for even numbers\n\n    3. Return the resulting list\n\n    Remember to handle edge cases where there might be no even digits in the given range.\n    \"\"\"\n    lower_bound = max(2, min(a, b))\n    upper_bound = min(8, max(a, b))\n\n    even_digits = [num for num in range(lower_bound, upper_bound + 1) if num % 2 == 0]\n\n    return even_digits"}
